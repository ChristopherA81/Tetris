{"ast":null,"code":"export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\nexport const createStage = () => Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill([0, 'clear']));\nexport const checkCollision = (player, stage, _ref) => {\n  let {\n    x: moveX,\n    y: moveY\n  } = _ref;\n\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // Check that we are on Tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if ( // Check our move is inside game areas height (y)\n        !stage[y + player.pos.y + moveY] || // Check our move is inside game areas width (x)\n        !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] || // Check cell is not set to clear\n        stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear') {\n          return true;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/christopherarmstrong/Desktop/tetris/Tetris/src/gameHelpers.js"],"names":["STAGE_WIDTH","STAGE_HEIGHT","createStage","Array","from","fill","checkCollision","player","stage","x","moveX","y","moveY","tetromino","length","pos"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,EAApB;AACP,OAAO,MAAMC,YAAY,GAAG,EAArB;AAGP,OAAO,MAAMC,WAAW,GAAG,MAE3BC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACF,YAAD,CAAhB,EAAgC,MAEhC,IAAIE,KAAJ,CAAUH,WAAV,EAAuBK,IAAvB,CAA4B,CAAC,CAAD,EAAI,OAAJ,CAA5B,CAFA,CAFO;AAQP,OAAO,MAAMC,cAAc,GAAG,CAACC,MAAD,EAASC,KAAT,WAA0C;AAAA,MAA1B;AAACC,IAAAA,CAAC,EAAEC,KAAJ;AAAWC,IAAAA,CAAC,EAAEC;AAAd,GAA0B;;AACpE,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACM,SAAP,CAAiBC,MAArC,EAA6CH,CAAC,IAAI,CAAlD,EAAqD;AACjD,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACM,SAAP,CAAiBF,CAAjB,EAAoBG,MAAxC,EAAgDL,CAAC,IAAI,CAArD,EAAwD;AAEpD;AAEA,UAAIF,MAAM,CAACM,SAAP,CAAiBF,CAAjB,EAAoBF,CAApB,MAA2B,CAA/B,EAAkC;AAC9B,aACK;AACL,SAACD,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWJ,CAAf,GAAmBC,KAApB,CAAN,IACI;AACA,SAACJ,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWJ,CAAf,GAAmBC,KAApB,CAAL,CAAgCH,CAAC,GAAGF,MAAM,CAACQ,GAAP,CAAWN,CAAf,GAAkBC,KAAlD,CAFL,IAGI;AACAF,QAAAA,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAWJ,CAAf,GAAmBC,KAApB,CAAL,CAAgCH,CAAC,GAAGF,MAAM,CAACQ,GAAP,CAAWN,CAAf,GAAmBC,KAAnD,EAA0D,CAA1D,MACA,OAPJ,EASE;AACE,iBAAO,IAAP;AACH;AAGJ;AACJ;AACJ;AACJ,CAxBM","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\n\nexport const createStage = () => \n\nArray.from(Array(STAGE_HEIGHT), () => \n\nnew Array(STAGE_WIDTH).fill([0, 'clear'])\n\n)\n\nexport const checkCollision = (player, stage, {x: moveX, y: moveY }) => {\n    for (let y = 0; y < player.tetromino.length; y += 1) {\n        for (let x = 0; x < player.tetromino[y].length; x += 1) {\n\n            // Check that we are on Tetromino cell\n\n            if (player.tetromino[y][x] !== 0) {\n                if (\n                     // Check our move is inside game areas height (y)\n                !stage[y + player.pos.y + moveY] || \n                    // Check our move is inside game areas width (x)\n                    !stage[y + player.pos.y + moveY][x + player.pos.x +moveX] ||\n                    // Check cell is not set to clear\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== \n                    'clear'\n\n                ) {\n                    return true; \n                }\n         \n\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}