{"ast":null,"code":"var _jsxFileName = \"/Users/christopherarmstrong/Desktop/tetris/Tetris/src/components/Tetris.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Display from \"./Display\";\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\";\nimport Stage from \"./Stage\";\nimport StartButton from \"./StartButton\";\nimport { usePlayer } from \"../hooks/usePlayer\";\nimport { useStage } from \"../hooks/useStage\";\nimport { createStage, checkCollision } from \"../gameHelpers\";\nimport { useInterval } from \"../hooks/useInterval\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tetris = () => {\n  _s();\n\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage] = useStage(player);\n  console.log(\"re-render\");\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {\n      x: dir,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  };\n\n  const startGame = () => {\n    // Reset Everything\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      if (player.pos.y < 1) {\n        console.log(\"GAME OVER\");\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const keyUp = _ref => {\n    let {\n      keyCode\n    } = _ref;\n\n    if (!gameOver) {\n      if (keyCode === 40) {\n        setDropTime(1000);\n      }\n    }\n  };\n\n  const dropPlayer = () => {\n    console.log(\"interval off\");\n    setDropTime(null);\n    drop();\n  };\n\n  const move = _ref2 => {\n    let {\n      keyCode\n    } = _ref2;\n\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode = 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n  return /*#__PURE__*/_jsxDEV(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    onKeyUp: keyUp,\n    children: /*#__PURE__*/_jsxDEV(StyledTetris, {\n      children: [/*#__PURE__*/_jsxDEV(Stage, {\n        stage: stage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: [gameOver ? /*#__PURE__*/_jsxDEV(Display, {\n          gameOver: gameOver,\n          text: \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Display, {\n            text: \"Score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: \"Rows\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: \"Level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StartButton, {\n          callback: startGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tetris, \"qrwEOTjuikYkg0eyZmIs6KMzMFs=\", false, function () {\n  return [usePlayer, useStage, useInterval];\n});\n\n_c = Tetris;\nexport default Tetris;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tetris\");","map":{"version":3,"sources":["/Users/christopherarmstrong/Desktop/tetris/Tetris/src/components/Tetris.js"],"names":["React","useState","Display","StyledTetrisWrapper","StyledTetris","Stage","StartButton","usePlayer","useStage","createStage","checkCollision","useInterval","Tetris","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","console","log","movePlayer","dir","x","y","startGame","drop","collided","pos","keyUp","keyCode","dropPlayer","move","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Display from \"./Display\";\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\";\nimport Stage from \"./Stage\";\nimport StartButton from \"./StartButton\";\nimport { usePlayer } from \"../hooks/usePlayer\";\nimport { useStage } from \"../hooks/useStage\";\nimport { createStage, checkCollision } from \"../gameHelpers\";\nimport { useInterval } from \"../hooks/useInterval\";\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage] = useStage(player);\n\n  console.log(\"re-render\");\n\n  const movePlayer = (dir) => {\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n      updatePlayerPos({ x: dir, y: 0 });\n    }\n  };\n\n  const startGame = () => {\n    // Reset Everything\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      if (player.pos.y < 1) {\n        console.log(\"GAME OVER\");\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        setDropTime(1000);\n      }\n    }\n  };\n\n  const dropPlayer = () => {\n    console.log(\"interval off\");\n    setDropTime(null);\n    drop();\n  };\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if ((keyCode = 38)) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  return (\n    <StyledTetrisWrapper\n      role=\"button\"\n      tabIndex=\"0\"\n      onKeyDown={(e) => move(e)}\n      onKeyUp={keyUp}\n    >\n      <StyledTetris>\n        <Stage stage={stage} />\n        {/* sidebar */}\n        <aside>\n          {gameOver ? (\n            <Display gameOver={gameOver} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text=\"Score\" />\n              <Display text=\"Rows\" />\n              <Display text=\"Level\" />\n            </div>\n          )}\n\n          <StartButton callback={startGame} />\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n"]},"metadata":{},"sourceType":"module"}