{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\nexport const usePlayer = () => {\n  _s();\n\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n\n  const rotate = (matrix, dir) => {\n    // make rows into columns \n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); // reverse each row to get rotated matrix\n\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = _ref => {\n    let {\n      x,\n      y,\n      collided\n    } = _ref;\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n\n_s(usePlayer, \"/Bo4p4ktWA7SFDcycXzEV39BZbw=\");","map":{"version":3,"sources":["/Users/christopherarmstrong/Desktop/tetris/Tetris/src/hooks/usePlayer.js"],"names":["useCallback","useState","TETROMINOS","randomTetromino","checkCollision","STAGE_WIDTH","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","length","updatePlayerPos","prev","resetPlayer"],"mappings":"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","sourcesContent":["import { useCallback, useState } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n\n        pos: {x: 0, y: 0},\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n\n    });\n\n    const rotate = (matrix, dir) => {\n        // make rows into columns \n\n        const rotatedTetro = matrix.map((_, index) => \n        matrix.map(col => col [index]),\n        );\n\n        // reverse each row to get rotated matrix\n        if (dir > 0) return rotatedTetro.map(row => row.reverse());\n        return rotatedTetro.reverse()\n\n    };\n\n    const playerRotate = (stage, dir) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while(checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n            clonedPlayer.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            if(offset > clonedPlayer.tetromino[0].length) {\n                rotate(clonedPlayer.tetromino, -dir);\n                clonedPlayer.pos.x = pos;\n                return;\n            }\n        }\n\n        setPlayer(clonedPlayer);\n\n    }\n\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided, \n        }))\n    }\n\n    const resetPlayer = useCallback(() => {\n        setPlayer ({\n            pos: { x: STAGE_WIDTH / 2 -2, y: 0 },\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n\n    }, [])\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n    \n\n}"]},"metadata":{},"sourceType":"module"}