{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from \"react\";\nexport const useGameStatus = rowsCleared => {\n  _s();\n\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n  const linePoints = [40, 100, 300, 1200];\n  const calcScore = useCallback(() => {\n    if (rowsCleared > 0) {\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n  return [score, setScore, rows, setRows, level, setLevel];\n};\n\n_s(useGameStatus, \"OyoIUu5u9oTBXcnkl9Z7Fnkr5uo=\");","map":{"version":3,"sources":["/Users/christopherarmstrong/Desktop/tetris/Tetris/src/hooks/useGameStatus.js"],"names":["useState","useEffect","useCallback","useGameStatus","rowsCleared","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","prev"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,OAAO,MAAMC,aAAa,GAAGC,WAAW,IAAI;AAAA;;AAExC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC;AAEA,QAAMW,UAAU,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,IAAf,CAAnB;AAEA,QAAMC,SAAS,GAAGV,WAAW,CAAC,MAAM;AAEhC,QAAIE,WAAW,GAAG,CAAlB,EAAqB;AACjBE,MAAAA,QAAQ,CAACO,IAAI,IAAIA,IAAI,GAAGF,UAAU,CAACP,WAAW,GAAG,CAAf,CAAV,IAA+BK,KAAK,GAAG,CAAvC,CAAhB,CAAR;AACAD,MAAAA,OAAO,CAACK,IAAI,IAAIA,IAAI,GAAGT,WAAhB,CAAP;AACH;AACJ,GAN4B,EAM1B,CAACK,KAAD,EAAQE,UAAR,EAAoBP,WAApB,CAN0B,CAA7B;AAQJH,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,SAAS;AAEZ,GAHQ,EAGN,CAACA,SAAD,EAAYR,WAAZ,EAAyBC,KAAzB,CAHM,CAAT;AAKA,SAAO,CAACA,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwCC,QAAxC,CAAP;AAEC,CAvBM;;GAAMP,a","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\n\nexport const useGameStatus = rowsCleared => {\n\n    const [score, setScore] = useState(0);\n    const [rows, setRows] = useState(0);\n    const [level, setLevel] = useState(0);\n\n    const linePoints = [40, 100, 300, 1200];\n\n    const calcScore = useCallback(() => {\n        \n        if (rowsCleared > 0) {\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n            setRows(prev => prev + rowsCleared)\n        }\n    }, [level, linePoints, rowsCleared]);\n\nuseEffect(() => {\n    calcScore();\n\n}, [calcScore, rowsCleared, score]);\n\nreturn [score, setScore, rows, setRows, level, setLevel];\n\n};"]},"metadata":{},"sourceType":"module"}