{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\nexport const usePlayer = () => {\n  _s();\n\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n\n  const updatePlayerPos = _ref => {\n    let {\n      x,\n      y,\n      collided\n    } = _ref;\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};\n\n_s(usePlayer, \"/Bo4p4ktWA7SFDcycXzEV39BZbw=\");","map":{"version":3,"sources":["/Users/christopherarmstrong/Desktop/tetris/Tetris/src/hooks/usePlayer.js"],"names":["useCallback","useState","TETROMINOS","randomTetromino","STAGE_WIDTH","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","updatePlayerPos","prev","resetPlayer"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,eAA5C;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AAEjCO,IAAAA,GAAG,EAAE;AAACC,MAAAA,CAAC,EAAE,CAAJ;AAAOC,MAAAA,CAAC,EAAE;AAAV,KAF4B;AAGjCC,IAAAA,SAAS,EAAET,UAAU,CAAC,CAAD,CAAV,CAAcU,KAHQ;AAIjCC,IAAAA,QAAQ,EAAE;AAJuB,GAAD,CAApC;;AAQA,QAAMC,eAAe,GAAG,QAAwB;AAAA,QAAvB;AAAEL,MAAAA,CAAF;AAAKC,MAAAA,CAAL;AAAQG,MAAAA;AAAR,KAAuB;AAC5CN,IAAAA,SAAS,CAACQ,IAAI,KAAK,EACf,GAAGA,IADY;AAEfP,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGM,IAAI,CAACP,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGK,IAAI,CAACP,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFU;AAGfG,MAAAA;AAHe,KAAL,CAAL,CAAT;AAKH,GAND;;AAQA,QAAMG,WAAW,GAAGhB,WAAW,CAAC,MAAM;AAClCO,IAAAA,SAAS,CAAE;AACPC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAEL,WAAW,GAAG,CAAd,GAAiB,CAAtB;AAAyBM,QAAAA,CAAC,EAAE;AAA5B,OADE;AAEPC,MAAAA,SAAS,EAAER,eAAe,GAAGS,KAFtB;AAGPC,MAAAA,QAAQ,EAAE;AAHH,KAAF,CAAT;AAMH,GAP8B,EAO5B,EAP4B,CAA/B;AASA,SAAO,CAACP,MAAD,EAASQ,eAAT,EAA0BE,WAA1B,CAAP;AAGH,CA7BM;;GAAMX,S","sourcesContent":["import { useCallback, useState } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n\n        pos: {x: 0, y: 0},\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n\n    });\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided, \n        }))\n    }\n\n    const resetPlayer = useCallback(() => {\n        setPlayer ({\n            pos: { x: STAGE_WIDTH / 2 -2, y: 0 },\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n\n    }, [])\n\n    return [player, updatePlayerPos, resetPlayer];\n    \n\n}"]},"metadata":{},"sourceType":"module"}